<!-- Main content -->
<section class="content" id="classifier">
	<!-- Small boxes (Stat box) -->
	<div class="row">
    <div class="col-lg-4">
      <div class="box">
        <div class="box-body">
          <p>
            Class 1: <input type="text" id="label1Input" class="form-control" value="without_mask"></input>
            Class 2: <input type="text" id="label2Input" class="form-control" value="with_mask"></input>
          </p>
          <h5>
            Result: <span id="result">N/A</span> (<span id="confidence">N/A</span>)
          </h5>
          <p>
            <button id="label1Button">Not Wearning Mask</button> <span id="amountOfLabel1Images">0</span> images
          </p>
          <p>
            <button id="label2Button">Wearing Mask</button> <span id="amountOfLabel2Images">0</span> images
          </p>
          <p>
            <button id="train" class="btn btn-success">Train</button> <span id="loss"></span>
          </p>
          <p>
            <button id="predict" class="btn btn-primary">Start Detecting!</button>
          </p>
        </div>
        <div class="box-footer clearfix">
          <p id="message">Core Model Not Loaded</p>
          <div class="pull-right">
            <button id="loadModel" class="btn btn-success">Load Model</button>
            <button id="saveModel" class="btn btn-primary">Save Model</button>
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-8">
      <div class="box">
        <div class="box-header">
          <h4 class="box-title">Creating the <i> Face classifier </i></h4>
        </div>
        <div class="box-body" id="liveView">
          <video autoplay muted id="video-webcam" width="640" height="480">
            Your Browser Doesn't Support
          </video>
        </div>
        <div class="box-footer clearfix">
          <div class="pull-right">
            <button class="btn btn-primary" onclick="vidOn()"><i class="ion ion-play"></i> Open </button>
            <button class="btn btn-danger" onclick="vidOff()"><i class="ion ion-stop"></i> Close </button>
         </div>
        </div>
      </div>
    </div>
  </div>
</section>
<script>
  // seleksi elemen video
  let video = document.querySelector("#video-webcam");
  let liveView = document.getElementById('liveView');
  let text = document.querySelector("#message");
  let isModelReady = false;
  let isVideoReady = false;
  let loading = document.getElementById('loading');
  let label1Button = document.getElementById('label1Button');
  let label2Button = document.getElementById('label2Button');
  let label1Input = document.getElementById('label1Input');
  let label2Input = document.getElementById('label2Input');
  let amountOfLabel1Images = document.getElementById('amountOfLabel1Images');
  let amountOfLabel2Images = document.getElementById('amountOfLabel2Images');
  let train = document.getElementById('train');
  let loss = document.getElementById('loss');
  let result = document.getElementById('result');
  let confidence = document.getElementById('confidence');
  let predict = document.getElementById('predict');
  let loadModel = document.getElementById('loadModel');
  let saveModel = document.getElementById('saveModel');
  let objectDetector;

  // Constant
  const DEFAULT_LABEL_1 = 'without_mask';
  const DEFAULT_LABEL_2 = 'with_mask';
  const THRESHOLD_TRAINING = 20;

  let totalLoss = 0;
  let isCustomModelReady = false;
  let isTrainingCompleted = false;
  let startPredicting = false;


  function preload() {
    objectDetector = ml5.objectDetector('cocossd');
  }

  function setup() {
    objectDetector.detect(video, gotResult);
  }

  function gotResult(error, results) {
    if (error) {
      console.error(error);
    } else {
      console.log(results);
      drawResults(results);
    }
    window.requestAnimationFrame(setup);
  }

  var children = [];

  function drawResults(results) {
    // Remove any highlighting we did previous frame.
    for (let i = 0; i < children.length; i++) {
      liveView.removeChild(children[i]);
    }
    children.splice(0);

    for (let n = 0; n < results.length; n++) {
      const r = Math.random()*256|0;
      const g = Math.random()*256|0;
      const b = Math.random()*256|0;
      if (results[n].confidence > 0.66) {
        const p = document.createElement('p');
        p.innerText = `${results[n].label} - with
            ${Math.round(parseFloat(results[n].confidence) * 100)}
            % confidence.`
        p.style = `stroke: 0 0 0; stroke-weight: 2px;
                  position: absolute; z-index: 2; padding: 5px;
                  font-size: 12px; color: rgba(${r}, ${g}, ${b}, 0)
                  border: 1px dashed rgba(255, 255, 255, 0.7)
                  background-color: rgba(255, 111, 0, 0.85);`
        const highlighter = document.createElement('div');
        highlighter.setAttribute('class', 'highlighter');
        highlighter.style = `width: ${results[n].width}px;
                            height: ${results[n].height}px;
                            stroke: ${r} ${g} ${b}; stroke-weight: 3px;
                            margin: ${results[n].x} ${results[n].y} ${results[n].width} ${results[n].height};`
        liveView.appendChild(highlighter);
        liveView.appendChild(p);
        children.push(p);
      }
    }
  }

  const updateStatus = () => {
    let texts = []
    if (isModelReady) texts.push('Core Model Loaded')
    if (isVideoReady) texts.push('Video Ready')
    if (isCustomModelReady) texts.push('Custom Model loaded');
    if (isTrainingCompleted) texts.push('Training Completed');
    if (isTrainingCompleted || isCustomModelReady) texts.push('Detecting is ready');

    text.innerHTML = texts.join(', ')
  }

  // When the "label1" button is pressed, add the current frame
  // from the video with a "label1" to the classifier
  label1Button.onclick = () => {
    const label1 = label1Input.value || DEFAULT_LABEL_1;
    classifier.addImage(label1);
    amountOfLabel1Images.innerText = Number(amountOfLabel1Images.innerText) + 1;
  };

  // When the "label2" button is pressed, add the current frame
  // from the video with a "label2" to the classifier
  label2Button.onclick = () => {
    const label2 = label2Input.value || DEFAULT_LABEL_2;
    classifier.addImage(label2);
    amountOfLabel2Images.innerText = Number(amountOfLabel2Images.innerText) + 1;
  };

  // When the train button is pressed, train the classifier
  train.onclick = () => {
    if (
      Number(amountOfLabel1Images.innerText) < THRESHOLD_TRAINING || 
      Number(amountOfLabel2Images.innerText) < THRESHOLD_TRAINING
    ) {
      window.alert(`Training data is too little. Please add training set at least ${THRESHOLD_TRAINING} samples per class`);
      return;
    }
    isTrainingCompleted = false;
    classifier.train((lossValue) => {
      if (lossValue) {
        totalLoss = lossValue;
        loss.innerHTML = `Loss: ${totalLoss}`;
      } else {
        loss.innerHTML = `Done Training! Final Loss: ${totalLoss}`;
        isTrainingCompleted = true;
        updateStatus();
      }
    });
  };

  // Show the results
  const gotResults = (err, results) => {
    // Display any error
    if (err) {
      console.error(err);
    } else if (results && results[0] && startPredicting) {
      result.innerText = results[0].label;
      confidence.innerText = results[0].confidence.toFixed(2);
      classifier.classify(gotResults);
    }
  }

  // Start predicting when the predict button is clicked
  predict.onclick = () => {
    if (startPredicting) {
      predict.innerText = 'Start Detecting!';
      predict.classList.remove('btn-danger');
      predict.classList.add('btn-primary');
      startPredicting = false;
    } else if (isTrainingCompleted || isCustomModelReady) {
      classifier.classify(gotResults);
      startPredicting = true;
      predict.classList.add('btn-danger');
      predict.classList.remove('btn-primary');
      predict.innerText = 'Stop Detecting!';
    } else {
      window.alert('Please train the model or load the existing one!');
    }
  };

  // Save current model
  saveModel.onclick = () => {
    featureExtractor.save((err, result) => {
      if (err) {
        window.alert('Failed to save model');
        console.error(err);
      }
    });
  };

  // Load existing model
  loadModel.onclick = () => {
    path = 'model/model.json';
    featureExtractor.load(path, (err, result) => {
      if (err) {
        window.alert('Failed to load custom model');
        console.error(err);
      }
      isCustomModelReady = true;
      updateStatus();
    });
  }

  const modelLoaded = () => {
    isModelReady = true;
    updateStatus();
  };

  const videoReady = () => {
    isVideoReady = true;
    updateStatus();
  };

  let featureExtractor = ml5.featureExtractor('MobileNet', modelLoaded);
  let classifier = featureExtractor.classification(video, videoReady);

  status.textContent = 'Loading...';
  label1Input.textContent = DEFAULT_LABEL_1;
  label2Input.textContent = DEFAULT_LABEL_2;

  label1Input.onchange = () => {
    label1Button.innerText = label1Input.value || 'class 1';
  };

  label2Input.onchange = () => {
    label2Button.innerText = label2Input.value || 'class 2';
  };

  // minta izin user
  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.oGetUserMedia;

  // jika user memberikan izin
  if (navigator.getUserMedia) {
    // jalankan fungsi handleVideo, dan videoError jika izin ditolak
    navigator.getUserMedia({ video: true }, handleVideo, videoError);
  }

  // fungsi ini akan dieksekusi jika  izin telah diberikan
  function handleVideo(stream) {
    video.srcObject = stream;
  }

  // fungsi ini akan dieksekusi kalau user menolak izin
  function videoError(e) {
    // do something
    alert("Allow to use webcam for demo!")
  }

  function vidOn() {
    navigator.getUserMedia({ video: true }, handleVideo, videoError);
  }

  function vidOff() {
    const mediaStream = video.srcObject;
    const tracks = mediaStream.getTracks();
    tracks.forEach(track => track.stop())
  }
</script>